@page
@model GHCW_FE.Pages.Booking.CartModel
@{
    ViewData["Title"] = "Giỏ hàng";
}

@if (Model.Message != null)
{
    <div class="container py-5">
        <h2 style="color: #50A215; background-color: white; padding: 2rem;">@Model.Message</h2>
    </div>
    <form method="post" asp-page-handler="SaveTicket" id="cartForm">
        <input type="hidden" asp-for="CartData" id="cartData" name="cartData" />
        <input type="hidden" asp-for="BookingDate" id="bookingDate" name="bookingDate" />
        <input type="hidden" asp-for="SelectedDiscountCode" id="selectedDiscountCode" name="selectedDiscountCode" />
        <input type="hidden" asp-for="PayLater" id="payLater" name="payLater" />

        <button type="submit" style="display: none;">Submit</button>
    </form>

    @if (Model.Success == true && Model.HasTicketSaved == false)
    {
        <script>
            let cart = JSON.parse(localStorage.getItem("cart")) || [];
            let cartData = JSON.stringify(cart);
            let bookingDate = localStorage.getItem("bookingDate") || "";
            let selectedDiscountCode = localStorage.getItem("selectedDiscountCode") || "";

            document.getElementById('cartData').value = cartData;
            document.getElementById('bookingDate').value = bookingDate;
            document.getElementById('selectedDiscountCode').value = selectedDiscountCode;

            document.getElementById('cartForm').submit();
        </script>
    }

    @if (Model.HasTicketSaved == true)
    {
        <script>
            localStorage.removeItem("cart");
            localStorage.removeItem("bookingDate");
            localStorage.removeItem("selectedDiscountCode");
        </script>
    }
}
@if (Model.Message == null)
{
    <div class="container py-5" style="padding: 3rem; background-color: white; margin-top: 2rem;">
        <h2 style="color: #50A215">Thông tin đơn hàng</h2>
        <table id="cart-items" class="mt-4" style="">
            <thead>
                <tr>
                    <th>Dịch vụ</th>
                    <th>Số lượng</th>
                    <th>Đơn giá</th>
                    <th>Thành tiền</th>
                    <th></th>
                </tr>
            </thead>
        </table>

        <form method="post" asp-page-handler="InitiatePayment">
            <div class="discount-section">
                <label for="discountSelect">Chọn mã giảm giá:</label>
                <select id="discountSelect">
                    <option value="">Không áp dụng mã giảm giá</option>
                </select>
            </div>

            <input type="hidden" asp-for="PaymentMethod" value="VnPay" />
            <input type="hidden" asp-for="PaymentInfo.Amount" id="paymentAmount" />
            <h4 id="discountedTotalP" style="color: #656565"></h4>

            @if (Model.IsLoggedIn == true)
            {
                <button type="submit" class="btn btn-success mt-3"><i class="fas fa-money-check"></i>Thanh toán qua VNPay</button>
            }
            else
            {
                <a href="@Url.Page("/Authentications/Login", new { returnUrl = Url.Page("/Booking/Cart") })" class="btn btn-primary mt-3">Đăng nhập</a>
                <p class="text-danger mt-2">@Model.ErrorMessage</p>
            }
        </form>

        <form method="post" asp-page-handler="InitiatePayment">

            @if (Model.IsLoggedIn == true)
            {
                <input type="hidden" asp-for="PaymentMethod" value="PayLater"/>
                <button type="submit" class="btn btn-success mt-3"><i class="fas fa-store"></i> Thanh toán tại quầy</button>
            }
        </form>


        <a href="/Booking" class="btn btn-primary mt-3" id="backToBookingButton"><i class="fas fa-arrow-left"></i>Quay lại trang đặt vé</a>

    </div>

    <script>
        let cart = JSON.parse(localStorage.getItem("cart")) || [];
        let cartItemsContainer = document.getElementById("cart-items");
        let cartTotal = 0;
        const availableServices = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.AvailableServices));

        const availableDiscounts = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.AvailableDiscounts));
        const discountSelect = document.getElementById("discountSelect");

        function displayCart() {
            cartTotal = 0;
            cartItemsContainer.innerHTML = `
                                <thead>
                                    <tr>
                                        <th>Dịch vụ</th>
                                        <th>Số lượng</th>
                                        <th>Đơn giá</th>
                                        <th>Thành tiền</th>
                                        <th></th>
                                    </tr>
                                </thead>
                            `;

            cart.forEach((item, index) => {
                const serviceName = getServiceName(item.serviceId);
                const servicePrice = getServicePrice(item.serviceId);

                const itemTotal = item.quantity * servicePrice;
                cartTotal += itemTotal;

                const disableDecrease = item.quantity === 1 ? 'disabled' : '';

                cartItemsContainer.innerHTML += `
                                <tbody>
                                    <tr class="cart-item">
                                        <td>${serviceName}</td>
                                        <td class="quantity-controls">
                                            <button onclick="decreaseQuantity(${index})" class="cart-button" ${disableDecrease}>-</button>
                                            <span class="quantity-display">${item.quantity}</span>
                                            <button onclick="increaseQuantity(${index})" class="cart-button">+</button>
                                        </td>
                                        <td>${servicePrice.toLocaleString('en-US')} VND</td>
                                        <td>${itemTotal.toLocaleString('en-US')} VND</td>
                                        <td>
                                            <button onclick="deleteItem(${index})" class="delete-button">Xóa</button>
                                        </td>
                                    </tr>
                                </tbody>
                            `;
            });

        if (cart.length === 0) {
            cartItemsContainer.innerHTML += `
                <tbody>
                    <tr>
                        <td colspan="5" style="text-align:center; padding: 20px;">
                            <h4>Giỏ hàng của bạn đang trống. Vui lòng chọn dịch vụ trước khi thực hiện thanh toán.</h4>
                        </td>
                    </tr>
                </tbody>
            `;
            document.querySelectorAll('button[type="submit"]').forEach(btn => btn.style.display = 'none');
            document.querySelector('.discount-section').style.display = 'none';
            document.getElementById("discountedTotalP").style.display = 'none';
        } else {
            cartItemsContainer.innerHTML += `
                <tbody>
                    <tr class="cart-item" style="border-top: 1px solid lightgray;">
                        <th>Tổng tiền</th>
                        <th colspan="2">${cartTotal.toLocaleString('en-US')} VND</th>
                        <th></th>
                    </tr>
                </tbody>
            `;
            document.querySelectorAll('button[type="submit"]').forEach(btn => btn.style.display = 'block');
        }
            const amountInput = document.getElementById("paymentAmount");
            if (amountInput) {
                amountInput.value = cartTotal;
            } else {
                console.error("Amount input field not found");
            }
        }

        function getServiceName(serviceId) {
            const service = availableServices.find(service => service.Id === serviceId);
            return service ? service.Name : 'Unknown Service';
        }

        function getServicePrice(serviceId) {
            const service = availableServices.find(service => service.Id === serviceId);
            return service ? service.Price : 0;
        }

        function increaseQuantity(index) {
            cart[index].quantity += 1;
            updateCart();
        }

        function decreaseQuantity(index) {
            if (cart[index].quantity > 1) {
                cart[index].quantity -= 1;
                updateCart();
            }
        }

        function deleteItem(index) {
            cart.splice(index, 1);
            updateCart();
        }

        function updateCart() {
            localStorage.setItem("cart", JSON.stringify(cart));
            displayCart();
        }

        displayCart();

        availableDiscounts.forEach(discount => {
            const option = document.createElement("option");
            option.value = discount.Code;
            option.textContent = `${discount.Name} - Giảm ${discount.Value}%`;
            discountSelect.appendChild(option);
        });

        document.addEventListener("DOMContentLoaded", function () {
            const savedCode = localStorage.getItem("selectedDiscountCode");
            if (savedCode) {
                discountSelect.value = savedCode;
                console.log(`Loaded saved discount code: ${savedCode}`);
                updateTotalWithDiscount(savedCode);
            }
        });

        discountSelect.addEventListener("change", function () {
            const selectedCode = discountSelect.value;
            if (selectedCode) {
                localStorage.setItem("selectedDiscountCode", selectedCode);
                console.log(`Saved discount code to local storage: ${selectedCode}`);
            } else {
                localStorage.removeItem("selectedDiscountCode");
                console.log("Removed discount code from local storage.");
            }

            updateTotalWithDiscount(selectedCode);
        });

        function updateTotalWithDiscount(selectedCode) {
            const selectedDiscount = availableDiscounts.find(discount => discount.Code === selectedCode);
            const discountValue = selectedDiscount ? selectedDiscount.Value : 0;

            const discountedTotal = cartTotal * (1 - discountValue / 100);

            const amountInput = document.getElementById("paymentAmount");
            if (amountInput) {
                amountInput.value = discountedTotal;
            }

            const discountedTotalP = document.getElementById("discountedTotalP");
            if (discountedTotalP) {
                discountedTotalP.innerText = `Tổng tiền sau khi giảm giá: ${discountedTotal.toLocaleString('en-US')} VND`;
            }
        }


    </script>

    <style>
        .cart-item {
            padding: 10px 0;
        }

        th, td {
            padding: 10px;
        }

        th {
            font-size: 25px;
        }

        .quantity-controls {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .cart-button {
            border: none;
            width: 40px;
            height: 40px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            background-color: #09e331;
            color: #ffffff;
            font-size: 24px;
            font-weight: bold;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
            cursor: pointer;
            transition: transform 0.1s ease, background-color 0.3s ease;
        }

        .cart-button:hover {
            background-color: #07b029;
        }

        .cart-button:active {
            transform: scale(0.9);
        }

        .quantity-display {
            font-size: 20px;
            font-weight: bold;
            color: #333;
            width: 40px;
            text-align: center;
            margin: 0 3px;
            border: 2px solid #09e331;
            border-radius: 8px;
            background-color: #f5f5f5;
        }

        .delete-button {
            background-color: #ff4d4d;
            color: #fff;
            font-weight: bold;
            font-size: 16px;
            padding: 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
        }

            .delete-button:hover {
                background-color: #e60000;
            }

            .delete-button:active {
                transform: scale(0.9);
            }

        .discount-section {
            display: flex;
            align-items: center;
            gap: 10px;
            margin: 20px 0;
        }

            .discount-section label {
                font-size: 18px;
                font-weight: bold;
                margin: 0;
            }

            .discount-section select {
                padding: 10px;
                font-size: 16px;
                flex: 1;
            }

        #empty-cart-message {
            font-size: 18px;
            color: #333;
            margin: 20px 0;
        }

        button.btn-success i {
            margin-right: 8px; /* Đảm bảo biểu tượng và text có khoảng cách */
        }

        button.btn-success, a.btn-primary {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            font-size: 16px;
        }

        #backToBookingButton {
            position: absolute;
            bottom: 20px;
            right: 20px;
            padding: 12px 20px;
            background-color: #007bff;
            color: white;
            border-radius: 50px;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
            font-size: 16px;
            text-decoration: none;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

            #backToBookingButton:hover {
                background-color: #0056b3;
            }

            #backToBookingButton i {
                font-size: 20px;
            }

        .container.py-5 {
            position: relative;
        }

        button.btn-success i {
            margin-right: 8px;
        }

    </style>

}