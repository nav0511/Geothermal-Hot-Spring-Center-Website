@page
@model GHCW_FE.Pages.Booking.CartModel
@{
    ViewData["Title"] = "Cart";
}

@if (Model.Message != null)
{
    <div class="container py-5">
        <h2 style="color: #50A215; background-color: white; padding: 2rem;">@Model.Message</h2>
    </div>
    <form method="post" asp-page-handler="SaveTicket" id="cartForm">
        <input type="hidden" asp-for="CartData" id="cartData" name="cartData" />
        <input type="hidden" asp-for="BookingDate" id="bookingDate" name="bookingDate" />

        <button type="submit" style="display: none;">Submit</button>
    </form>

    @if (Model.Success == true && Model.HasTicketSaved == null)
    {
        <script>
            let cart = JSON.parse(localStorage.getItem("cart")) || [];
            let cartData = JSON.stringify(cart);
            let bookingDate = localStorage.getItem("bookingDate") || "";

            document.getElementById('cartData').value = cartData;
            document.getElementById('bookingDate').value = bookingDate; 

            document.getElementById('cartForm').submit();
        </script>
    }

    @if (Model.HasTicketSaved == true)
    {
        <script>
            localStorage.removeItem("cart");
        </script>
    }
}
@if (Model.Message == null)
{
    <div class="container py-5" style="padding: 3rem; background-color: white; margin-top: 2rem;">
        <h2 style="color: #50A215">Thông tin đơn hàng</h2>
        <table id="cart-items" class="mt-4" style="">
            <thead>
                <tr>
                    <th>Dịch vụ</th>
                    <th>Số lượng</th>
                    <th>Đơn giá</th>
                    <th>Thành tiền</th>
                </tr>
            </thead>
        </table>

        <form method="post" asp-page-handler="InitiatePayment">
            <input type="hidden" asp-for="PaymentInfo.Amount" id="paymentAmount" />

@*             <div class="form-group">
                <label asp-for="PaymentInfo.OrderType">Order Type</label>
                <input type="text" asp-for="PaymentInfo.OrderType" class="form-control" required />
            </div>
            <div class="form-group">
                <label asp-for="PaymentInfo.OrderDescription">Order Description</label>
                <input type="text" asp-for="PaymentInfo.OrderDescription" class="form-control" required />
            </div>
            <div class="form-group">
                <label asp-for="PaymentInfo.Name">Name</label>
                <input type="text" asp-for="PaymentInfo.Name" class="form-control" required />
            </div> *@
            @if (Model.IsLoggedIn == true)
            {
                <button type="submit" class="btn btn-success mt-3">Thanh toán</button>
            }
            else
            {
                <a href="@Url.Page("/Authentications/Login", new { returnUrl = Url.Page("/Booking/Cart") })" class="btn btn-primary mt-3">Đăng nhập</a>
                <p class="text-danger mt-2">@Model.ErrorMessage</p>
            }
        </form>
    </div>

    <script>
        let cart = JSON.parse(localStorage.getItem("cart")) || [];
        let cartItemsContainer = document.getElementById("cart-items");
        let cartTotal = 0;
        const availableServices = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.AvailableServices));

        function displayCart() {
            cartTotal = 0;
            cartItemsContainer.innerHTML = `
                                <thead>
                                    <tr>
                                        <th>Dịch vụ</th>
                                        <th>Số lượng</th>
                                        <th>Đơn giá</th>
                                        <th>Thành tiền</th>
                                    </tr>
                                </thead>
                            `;

            cart.forEach((item, index) => {
                const serviceName = getServiceName(item.serviceId);
                const servicePrice = getServicePrice(item.serviceId) * 1000;

                const itemTotal = item.quantity * servicePrice;
                cartTotal += itemTotal;

                cartItemsContainer.innerHTML += `
                                <tbody>
                                    <tr class="cart-item">
                                        <td>${serviceName}</td>
                                        <td>
                                            <button onclick="decreaseQuantity(${index})" class="cart-button">-</button>
                                            <span class="quantity-display">${item.quantity}</span>
                                            <button onclick="increaseQuantity(${index})" class="cart-button">+</button>
                                        </td>
                                        <td>${servicePrice} VND</td>
                                        <td>${itemTotal} VND</td>
                                    </tr>
                                </tbody>
                            `;
            });

            cartItemsContainer.innerHTML += `
                                <tbody>
                                        <tr class="cart-item" style="border-top: 1px solid lightgray;">
                                        <th>Tổng tiền</th>
                                        <th>${cartTotal.toLocaleString()} VND</th>
                                        <th></th>
                                        <th></th>
                                    </tr>
                                </tbody>
                                    `;
            const amountInput = document.getElementById("paymentAmount");
            if (amountInput) {
                amountInput.value = cartTotal;
            } else {
                console.error("Amount input field not found");
            }
        }

        function getServiceName(serviceId) {
            const service = availableServices.find(service => service.Id === serviceId);
            return service ? service.Name : 'Unknown Service';
        }

        function getServicePrice(serviceId) {
            const service = availableServices.find(service => service.Id === serviceId);
            return service ? service.Price : 0;
        }

        function increaseQuantity(index) {
            cart[index].quantity += 1;
            updateCart();
        }

        function decreaseQuantity(index) {
            if (cart[index].quantity > 1) {
                cart[index].quantity -= 1;
                updateCart();
            }
        }

        function updateCart() {
            localStorage.setItem("cart", JSON.stringify(cart));
            displayCart();
        }

        displayCart();


    </script>

    <style>
        .cart-item {
            padding: 10px 0;
        }

        th, td {
            padding: 10px;
        }

        th {
            font-size: 25px;
        }

        .cart-button {
            border: none;
            margin: 3px;
            width: 40px;
            height: 40px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            background-color: #09e331;
            color: #ffffff;
            font-size: 24px;
            font-weight: bold;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
            cursor: pointer;
            transition: transform 0.1s ease, background-color 0.3s ease;
        }

        .cart-button:hover {
            background-color: #07b029;
        }

        .cart-button:active {
            transform: scale(0.9);
        }

        .quantity-display {
            font-size: 20px;
            font-weight: bold;
            color: #333;
            width: 40px;
            text-align: center;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            margin: 0 3px;
            border: 2px solid #09e331;
            border-radius: 8px;
            background-color: #f5f5f5;
        }
    </style>

}