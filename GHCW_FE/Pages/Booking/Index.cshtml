@page
@model GHCW_FE.Pages.Booking.IndexModel
@{
    ViewData["Title"] = "Đặt vé";
}

<div class="container py-5">
    <form>
        <!-- Date Selection -->
        <div class="form-group">
            <label for="bookingDate">Choose Booking Date:</label>
            <input type="date" id="bookingDate" class="form-control" asp-for="BookingDate"
                   min="@DateTime.Now.ToString("yyyy-MM-dd")"
                   value="@DateTime.Now.ToString("yyyy-MM-dd")" required />
        </div>

        <!-- Cart Summary and Payment -->
        <div class="cart-summary mt-2 mb-5">
            <a id="paymentButton" class="btn btn-success mt-3" onclick="checkBookingDate()">Thanh toán</a>
        </div>
    </form>

    <!-- Services List -->
    <div class="row">
        @foreach (var service in Model.AvailableServices)
        {
            <div class="col-md-4 mb-4">
                <div class="card">
                    <img src="@service.Image" class="card-img-top service-image" alt="@service.Name">
                    <div class="card-body">
                        <h5 class="card-title service-title">@service.Name</h5>
                        <p class="card-text service-description">@service.Description</p>
                        <p class="service-price">Giá: <strong>@String.Format("{0:N0}", service.Price * 1000) VNĐ</strong></p>
                        <div class="quantity-wrapper">
                            <label>Số lượng:</label>
                            <input type="number" min="1" value="1" id="quantity-@service.Id" class="form-control quantity-input" oninput="validateQuantity(this)" />
                        </div>
                        <button class="btn btn-primary mt-2" onclick="addToCart(@service.Id, parseInt(document.getElementById('quantity-@service.Id').value), @service.Price)">Chọn</button>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Notification -->
    <div id="notification" class="notification">
        <p id="notification-message"></p>
    </div>

</div>

<script>
    function validateQuantity(input) {
        const originalValue = input.value;
        const cursorPosition = input.selectionStart;

        const filteredValue = originalValue.replace(/[^0-9]/g, "");

        if (!filteredValue || parseInt(filteredValue, 10) === 0) {
            input.value = "1";
        } else {
            input.value = filteredValue;
        }

        // Đặt lại vị trí con trỏ
        const newCursorPosition = Math.min(cursorPosition, input.value.length);
        input.setSelectionRange(newCursorPosition, newCursorPosition);
    }

    document.querySelectorAll('.quantity-input').forEach(input => {
        input.addEventListener('keydown', function (event) {
            // Các phím được phép nhập: Backspace, Delete, Tab, mũi tên, Ctrl/Command + A, C, V
            const allowedKeys = [
                "Backspace", "Delete", "Tab", "ArrowLeft", "ArrowRight", "Control", "Meta", "Enter"
            ];

            if (
                allowedKeys.includes(event.key) || // Cho phép phím đặc biệt
                (event.ctrlKey || event.metaKey) // Cho phép Ctrl/Command
            ) {
                return;
            }

            // Chặn nhập "e", ".", "-", hoặc ký tự không phải số
            if (!/^[0-9]$/.test(event.key)) {
                event.preventDefault();
            }
        });

        input.addEventListener('input', function () {
            validateQuantity(input);
        });
    });


    let cart = JSON.parse(localStorage.getItem("cart")) || [];

    function updatePaymentButton() {
        const cart = JSON.parse(localStorage.getItem("cart")) || [];
        const paymentButton = document.getElementById("paymentButton");

        if (cart.length > 0) {
            paymentButton.classList.remove("disabled");
            paymentButton.onclick = checkBookingDate;
            paymentButton.removeAttribute("title");
        } else {
            paymentButton.classList.add("disabled");
            paymentButton.onclick = null;
            paymentButton.setAttribute("title", "Bạn phải thêm dịch vụ vào giỏ hàng trước khi thanh toán");
        }
    }

    document.addEventListener("DOMContentLoaded", function () {
        updatePaymentButton();

        const savedBookingDate = localStorage.getItem("bookingDate");
        if (savedBookingDate) {
            document.getElementById("bookingDate").value = savedBookingDate;
        }
    });

    function addToCart(serviceId, quantity, price) {
        if (!quantity || quantity < 1) {
            showNotification("Số lượng phải lớn hơn hoặc bằng 1.");
            return;
        }

        const existingItem = cart.find(item => item.serviceId === serviceId);

        if (existingItem) {
            existingItem.quantity += quantity;
        } else {
            cart.push({ serviceId, quantity , price });
        }

        localStorage.setItem("cart", JSON.stringify(cart));

        showNotification(`Đã thêm ${quantity} x Dịch vụ vào giỏ hàng`);
        updatePaymentButton();
    }

    function showNotification(message) {
        const notification = document.getElementById("notification");
        const messageElement = document.getElementById("notification-message");

        messageElement.textContent = message;

        notification.style.display = "block";

        // Hide the notification after 3 seconds
        setTimeout(function () {
            notification.style.display = "none";
        }, 3000);
    }

    function checkBookingDate() {
        const bookingDate = document.getElementById("bookingDate").value;
        if (!bookingDate) {
            alert("Please select a booking date before proceeding to payment.");
        } else {
            localStorage.setItem("bookingDate", bookingDate);
            window.location.href = `@Url.Page("./Cart")?bookingDate=${encodeURIComponent(bookingDate)}`;
        }
    }

</script>

<style>
    .service-description {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 3;
        overflow: hidden;
        text-overflow: ellipsis;
        max-height: 4.5em;
    }

    .service-image {
        height: 200px; /* Chiều cao cố định */
        object-fit: cover; /* Giữ ảnh đúng tỉ lệ */
        width: 100%;
    }

    .card {
        display: flex;
        flex-direction: column;
        justify-content: space-between; /* Đảm bảo các phần tử cách đều nhau */
        height: 100%; /* Chiều cao đồng bộ */
    }

    .card-body {
        display: flex;
        flex-direction: column;
        justify-content: space-between; /* Đảm bảo các phần tử trong card cách đều nhau */
        flex-grow: 1;
    }

    .service-title {
        display: -webkit-box;
        -webkit-line-clamp: 3; /* Hiển thị tối đa 3 dòng */
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        height: 4.5em; /* Đảm bảo chiều cao đồng nhất */
    }

    .quantity-wrapper {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .quantity-input {
        max-width: 80px;
    }

    .service-price {
        font-size: 1rem;
        color: #ff5722;
        font-weight: bold;
    }

    .notification {
        position: fixed;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        background-color: #28a745;
        color: white;
        padding: 10px 20px;
        border-radius: 5px;
        display: none;
        font-size: 16px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
</style>