@page
@using GHCW_FE.DTOs
@using System.Text.Json
@using Microsoft.AspNetCore.Http
@model GHCW_FE.Pages.Admin.ScheduleManagementModel
@{
    ViewData["Title"] = "Quản lý lịch làm việc";
    Layout = "_LayoutManagement";
    ViewData["ActivePage"] = "/Admin/ScheduleManagement";
}

<!-- Main Content -->
<header class="page-header">
    <h2>Quản lý lịch làm việc</h2>
    <button class="btn-add" onclick="window.location.href='/Admin/AddSchedule'">+ Thêm lịch</button>
</header>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success mt-3">
        @TempData["SuccessMessage"]
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger mt-3">
        @TempData["ErrorMessage"]
    </div>
}

<div class="filter-container">
    <select id="yearFilter" onchange="OnYearChange()">
        <!-- Năm sẽ được cập nhật tự động trong JavaScript -->
    </select>
    <select id="weekFilter" onchange="OnWeekChange()">
        <!-- Các tuần sẽ được cập nhật khi chọn năm -->
    </select>
</div>

<div class="schedule-title">Lịch làm việc</div>

<!-- Bảng lịch tuần -->
<table class="schedule-table">
    <tr id="scheduleHeaderRow">
        <th>Ca/Ngày</th>
        <th>Thứ 2</th>
        <th>Thứ 3</th>
        <th>Thứ 4</th>
        <th>Thứ 5</th>
        <th>Thứ 6</th>
        <th>Thứ 7</th>
        <th>Chủ Nhật</th>
    </tr>
    @foreach (var shift in new[] { 1, 2 })
    {
        <tr>
            <td>
                <b>Ca @shift</b><br>
                @(shift == 1 ? "(7:00 - 15:00)" : "(15:00 - 22:00)")
            </td>

            @for (int i = 0; i < 7; i++)
            {
                var currentDate = Model.SW.StartDate.AddDays(i); // Calculate the current day
                var scheduledEmployee = Model.Schedules.FirstOrDefault(schedule =>
                schedule.Date.Date == currentDate.Date && schedule.Shift == shift);

                <td>
                    @if (scheduledEmployee != null)
                    {
                        <span>@scheduledEmployee.ReceptionistName</span>
                        @if (HttpContext.Session.GetString("acc") != null)
                        {
                            var account = JsonSerializer.Deserialize<AccountDTO>(HttpContext.Session.GetString("acc"));
                            @if (account.Role <= 1)
                            {
                                <br>
                                <div style="display:flex; align-content:center; justify-content: center;">
                                    <a href="/Admin/EditSchedule/?id=@scheduledEmployee.Id">Sửa</a>
                                    <span class="separator">|</span>
                                    <form method="post" asp-page-handler="DeleteSchedule">
                                        <input type="hidden" name="startDate2" value="@Model.SW.StartDate.ToString("yyyy-MM-dd")" />
                                        <input type="hidden" name="endDate2" value="@Model.SW.EndDate.ToString("yyyy-MM-dd")" />
                                        <button type="submit" class="btn btn-danger" name="id" value="@scheduledEmployee.Id">Ẩn</button>
                                    </form>
                                </div>
                            }
                        }
                    }
                    else
                    {
                        <span>--</span>
                    }
                </td>
            }
        </tr>
    }
</table>

<form id="scheduleForm" method="get" asp-page-handler="OnGetAsync">
    <input type="hidden" id="startDateInput" name="startDate" />
    <input type="hidden" id="endDateInput" name="endDate" />
    <input type="hidden" id="flagInput" name="flag" value="@(Model.Flag)" />
</form>

<script>
    function updateScheduleTableHeader() {
        const year = parseInt(document.getElementById("yearFilter").value, 10);
        const weekNumber = parseInt(document.getElementById("weekFilter").value, 10);
        const headerRow = document.getElementById("scheduleHeaderRow");

        // const storedYear = sessionStorage.getItem("selectedYear");
        // const storedWeek = sessionStorage.getItem("selectedWeek");
        // if (storedYear && storedWeek) {
        //     year = parseInt(storedYear, 10);
        //     weekNumber = parseInt(storedWeek, 10);
        // }
        // Lấy ngày bắt đầu và kết thúc của tuần đã chọn
        const { start, end } = getWeekStartEndDates(year, weekNumber);

        // Cập nhật từng ngày trong tiêu đề của bảng
        for (let i = 1; i <= 7; i++) {
            const th = headerRow.children[i]; // Lấy th thứ 2 đến Chủ Nhật
            const day = new Date(start);
            day.setDate(start.getDate() + i - 1);
            const dayOfWeek = `Thứ ${i < 7 ? i + 1 : 'CN'}`; // Hiển thị 'Thứ 2', ..., 'Chủ Nhật'
            const formattedDate = `${day.getDate().toString().padStart(2, '0')}/${(day.getMonth() + 1).toString().padStart(2, '0')}`;
            th.innerHTML = `${dayOfWeek}<br>${formattedDate}`;
        }

        // Cập nhật giá trị startDate và endDate vào input
        document.getElementById("startDateInput").value = `${start.getFullYear()}-${(start.getMonth() + 1).toString().padStart(2, '0')}-${start.getDate().toString().padStart(2, '0')}`;
        document.getElementById("endDateInput").value = `${end.getFullYear()}-${(end.getMonth() + 1).toString().padStart(2, '0')}-${end.getDate().toString().padStart(2, '0')}`;
    }

    // Hàm cập nhật các năm trong dropdown
    function updateYearOptions() {
        const currentYear = new Date().getFullYear(); // Lấy năm hiện tại
        const yearFilter = document.getElementById("yearFilter");

        // Xóa các tùy chọn cũ trong dropdown
        yearFilter.innerHTML = "";

        // Thêm các năm cần hiển thị
        const startYear = currentYear - 1;  // Hiển thị một năm trước
        const endYear = currentYear + 1;    // Hiển thị một năm sau
        const selectedYear = sessionStorage.getItem("selectedYear") ? parseInt(sessionStorage.getItem("selectedYear"), 10) : currentYear;

        // Thêm năm trước và năm sau vào dropdown
        for (let year = startYear; year <= endYear; year++) {
            const option = document.createElement("option");
            option.value = year;
            option.textContent = year;
            // Đặt năm hiện tại hoặc năm đã chọn làm mặc định
            if (year === selectedYear) {
                option.selected = true;
            }
            yearFilter.appendChild(option);
        }
    }

    // Hàm cập nhật các tuần của năm đã chọn
    function updateDateRange() {
        const year = parseInt(document.getElementById("yearFilter").value, 10);
        const weekFilter = document.getElementById("weekFilter");
        const totalWeeks = getISOWeeksInYear(year);
        const currentWeek = getCurrentWeek(year);
        // Xóa các tùy chọn cũ trong dropdown tuần
        weekFilter.innerHTML = "";

        const selectedWeek = sessionStorage.getItem("selectedWeek") ? parseInt(sessionStorage.getItem("selectedWeek"), 10) : currentWeek;

        // Thêm các tuần vào dropdown
        for (let week = 1; week <= totalWeeks; week++) {
            const { start, end } = getWeekStartEndDates(year, week);
            const startDate = `${start.getDate().toString().padStart(2, '0')}/${(start.getMonth() + 1).toString().padStart(2, '0')}`;
            const endDate = `${end.getDate().toString().padStart(2, '0')}/${(end.getMonth() + 1).toString().padStart(2, '0')}`;
            const option = document.createElement("option");
            option.value = week;
            option.textContent = `Tuần ${week} (${startDate} - ${endDate})`;
            // Đặt năm hiện tại hoặc năm đã chọn làm mặc định
            if (week === selectedWeek) {
                option.selected = true;
            }
            weekFilter.appendChild(option);
        }
    }

    function getISOWeeksInYear(year) {
        const lastDayOfYear = new Date(year, 11, 31);
        const lastWeekNumber = getISOWeekNumber(lastDayOfYear);

        // Nếu ngày cuối cùng của năm là thứ 4 trở đi, thêm 1 tuần (ISO chuẩn)
        if ((lastDayOfYear.getDay() === 4) ||
            (lastDayOfYear.getDay() === 5 && lastWeekNumber === 53) ||
            (lastDayOfYear.getDay() === 6 && lastWeekNumber === 52)) {
            return 53;
        }
        return 52;
    }

    // Hàm lấy tuần hiện tại của năm
    function getCurrentWeek(year) {
        const currentDate = new Date();
        return getISOWeekNumber(currentDate);
    }

    function getISOWeekNumber(date) {
        const target = new Date(date.valueOf());
        const dayNum = (date.getDay() + 6) % 7;  // Đảm bảo thứ Hai là ngày đầu tuần
        target.setDate(target.getDate() - dayNum + 3);  // Thiết lập đến thứ Tư tuần đó
        const firstThursday = target.valueOf();
        target.setMonth(0, 1);  // Ngày 1 tháng 1
        if (target.getDay() !== 4) {  // Nếu ngày đầu tiên của năm không phải là thứ Tư
            target.setMonth(0, 1 + ((4 - target.getDay()) + 7) % 7);  // Đặt ngày đầu tiên là thứ Tư
        }
        return 1 + Math.ceil((firstThursday - target) / 604800000);  // Chia số mili giây cho một tuần
    }

    function getWeekStartEndDates(year, weekNumber) {
        const january4 = new Date(year, 0, 4);
        const dayOfWeek = january4.getDay() || 7;
        const weekStart = new Date(january4);
        weekStart.setDate(january4.getDate() - dayOfWeek + 1 + (weekNumber - 1) * 7);
        const weekEnd = new Date(weekStart);
        weekEnd.setDate(weekStart.getDate() + 6);
        return {
            start: weekStart,
            end: weekEnd
        };
    }

    document.addEventListener("DOMContentLoaded", function () {
        const currentYear = new Date().getFullYear();
        const currentWeek = getCurrentWeek(currentYear);
        flag = document.getElementById("flagInput").value;
        console.log(flag);
        if (flag) {
            sessionStorage.setItem("selectedYear", currentYear);
            sessionStorage.setItem("selectedWeek", currentWeek);
        } else {
            const selectedYear = sessionStorage.getItem("selectedYear") ? parseInt(sessionStorage.getItem("selectedYear"), 10) : currentYear;
            const selectedWeek = sessionStorage.getItem("selectedWeek") ? parseInt(sessionStorage.getItem("selectedWeek"), 10) : currentWeek;
            document.getElementById("yearFilter").value = selectedYear;
            document.getElementById("weekFilter").value = selectedWeek;
        }
        // Khởi tạo danh sách năm và tuần khi trang được tải
        updateYearOptions();
        updateDateRange();
        updateScheduleTableHeader();
    });

    function OnYearChange() {
        const selectedYear = document.getElementById("yearFilter").value;
        sessionStorage.setItem("selectedYear", selectedYear);
        flag = false;
        document.getElementById("flagInput").value = flag;
        updateDateRange(); // Cập nhật danh sách tuần cho năm mới
        updateScheduleTableHeader(); // Cập nhật ngày trong bảng
        document.getElementById("scheduleForm").submit();
    }

    function OnWeekChange() {
        const selectedWeek = document.getElementById("weekFilter").value;
        sessionStorage.setItem("selectedWeek", selectedWeek);
        flag = false;
        document.getElementById("flagInput").value = flag;
        updateScheduleTableHeader(); // Cập nhật ngày trong bảng khi tuần thay đổi
        document.getElementById("scheduleForm").submit();
    }

    // Get the profile icon and dropdown elements
    var profileIcon = document.getElementById("profileIcon");
    var dropdownMenu = document.getElementById("dropdownMenu");
    var profileMenu = document.querySelector(".profile-menu");

    // Toggle dropdown when the profile icon is clicked
    profileIcon.addEventListener("click", function (event) {
        event.stopPropagation();
        profileMenu.classList.toggle("show");
    });

    // Close the dropdown if user clicks outside
    window.addEventListener("click", function (event) {
        if (!event.target.matches('.profile-icon') && profileMenu.classList.contains('show')) {
            profileMenu.classList.remove('show');
        }
    });

</script>

<style>
    .btn-add {
        background-color: #42C2A8;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        font-size: 16px;
    }

        .btn-add:hover {
            background-color: #37a58d;
        }



    /* Pagination */
    .pagination {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

        .pagination a {
            padding: 10px 15px;
            margin: 0 5px;
            background-color: #e0f7fa;
            text-decoration: none;
            color: black;
            border-radius: 4px;
        }

            .pagination a.active {
                background-color: #00b894;
                color: white;
            }

            .pagination a:hover {
                background-color: #019875;
                color: white;
            }

    /* CSS cho bảng lịch tuần */
    .schedule-table {
        width: 100%;
        margin-top: 20px;
        border-collapse: collapse;
        background-color: white;
    }

        .schedule-table th, .schedule-table td {
            border: 1px solid #ddd;
            padding: 15px;
            text-align: center;
        }

        .schedule-table th {
            background-color: #f1f1f1;
            color: #333;
        }

    /* Dropdown cho năm và tuần */
    .filter-container {
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        gap: 10px;
        margin-bottom: 20px;
    }

        .filter-container select {
            padding: 8px;
            border-radius: 8px;
        }

    .schedule-title {
        color: #28a745; /* Màu xanh */
        font-size: 24px;
        font-weight: bold;
        text-align: center;
        margin-bottom: 10px;
    }

    
</style>