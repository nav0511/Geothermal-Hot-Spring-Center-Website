@page
@using GHCW_FE.DTOs
@using System.Text.Json
@using Microsoft.AspNetCore.Http
@model GHCW_FE.Pages.Admin.ScheduleManagementModel
@{
    ViewData["Title"] = "Quản lý lịch trình";
    Layout = "_LayoutManagement";
    ViewData["ActivePage"] = "/Admin/ScheduleManagement";
}

<!-- Main Content -->
<header class="page-header">
    <h2>Quản lý lịch trình</h2>
    <button class="btn-add" onclick="window.location.href='#'">+ Thêm lịch trình mới</button>
</header>

<div class="filter-container">
    <select id="yearFilter" onchange="updateDateRange()">
        <!-- Năm sẽ được cập nhật tự động trong JavaScript -->
    </select>
    <select id="weekFilter" onchange="updateDateRange()">
        <!-- Các tuần sẽ được cập nhật khi chọn năm -->
    </select>
</div>

<div class="schedule-title">Lịch trình</div>

<!-- Bảng lịch tuần -->
<table class="schedule-table">
    <tr>
        <th>Ca/Ngày</th>
        <th>Thứ 2<br>07/10</th>
        <th>Thứ 3<br>08/10</th>
        <th>Thứ 4<br>09/10</th>
        <th>Thứ 5<br>10/10</th>
        <th>Thứ 6<br>11/10</th>
        <th>Thứ 7<br>12/10</th>
        <th>Chủ Nhật<br>13/10</th>
    </tr>
    <tr>
        <td><b>Ca 1</b><br>(7:00 - 15:00)</td>
        <td>Nguyen Minh K<br><a href="#">Sửa</a> | <a href="#">Xóa</a></td>
        <td>Quang Thi Quynh N<br><a href="#">Sửa</a> | <a href="#">Xóa</a></td>
        <td>Nguyen Minh K<br><a href="#">Sửa</a> | <a href="#">Xóa</a></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td><b>Ca 2</b><br>(15:00 - 22:00)</td>
        <td>Quang Thi Quynh N<br><a href="#">Sửa</a> | <a href="#">Xóa</a></td>
        <td>Nguyen Minh K<br><a href="#">Sửa</a> | <a href="#">Xóa</a></td>
        <td>Quang Thi Quynh N<br><a href="#">Sửa</a> | <a href="#">Xóa</a></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
    </tr>
</table>

<script>
    // Get the profile icon and dropdown elements
    var profileIcon = document.getElementById("profileIcon");
    var dropdownMenu = document.getElementById("dropdownMenu");
    var profileMenu = document.querySelector(".profile-menu");

    // Toggle dropdown when the profile icon is clicked
    profileIcon.addEventListener("click", function (event) {
        event.stopPropagation();
        profileMenu.classList.toggle("show");
    });

    // Close the dropdown if user clicks outside
    window.addEventListener("click", function (event) {
        if (!event.target.matches('.profile-icon') && profileMenu.classList.contains('show')) {
            profileMenu.classList.remove('show');
        }
    });

    // Hàm cập nhật các năm trong dropdown
    function updateYearOptions() {
        const currentYear = new Date().getFullYear(); // Lấy năm hiện tại
        const yearFilter = document.getElementById("yearFilter");

        // Xóa các tùy chọn cũ trong dropdown
        yearFilter.innerHTML = "";

        // Thêm các năm cần hiển thị
        const startYear = currentYear - 1;  // Hiển thị một năm trước
        const endYear = currentYear + 1;    // Hiển thị một năm sau

        // Thêm năm trước và năm sau vào dropdown
        for (let year = startYear; year <= endYear; year++) {
            const option = document.createElement("option");
            option.value = year;
            option.textContent = year;
            if (year === currentYear) {
                option.selected = true;  // Đánh dấu năm hiện tại là đã chọn
            }
            yearFilter.appendChild(option);
        }
    }

    // Hàm cập nhật các tuần của năm đã chọn
    function updateDateRange() {
        const year = parseInt(document.getElementById("yearFilter").value, 10);
        const weekFilter = document.getElementById("weekFilter");
        const totalWeeks = getISOWeeksInYear(year);

        // Xóa các tùy chọn cũ trong dropdown tuần
        weekFilter.innerHTML = "";

        // Thêm các tuần vào dropdown
        for (let week = 1; week <= totalWeeks; week++) {
            const { start, end } = getWeekStartEndDates(year, week);
            const startDate = `${start.getDate().toString().padStart(2, '0')}/${(start.getMonth() + 1).toString().padStart(2, '0')}`;
            const endDate = `${end.getDate().toString().padStart(2, '0')}/${(end.getMonth() + 1).toString().padStart(2, '0')}`;
            const option = document.createElement("option");
            option.value = week;
            option.textContent = `Tuần ${week} (${startDate} - ${endDate})`;
            weekFilter.appendChild(option);
        }

        // Lấy tuần hiện tại và chọn tuần đó
        const currentWeek = getCurrentWeek(year);
        console.log(currentWeek);
        if (currentWeek <= totalWeeks) {
            weekFilter.value = currentWeek; // Chọn tuần hiện tại nếu có
        }
    }

    function getISOWeeksInYear(year) {
        const lastDayOfYear = new Date(year, 11, 31);
        const lastWeekNumber = getISOWeekNumber(lastDayOfYear);

        // Nếu ngày cuối cùng của năm là thứ 4 trở đi, thêm 1 tuần (ISO chuẩn)
        if ((lastDayOfYear.getDay() === 4) ||
            (lastDayOfYear.getDay() === 5 && lastWeekNumber === 53) ||
            (lastDayOfYear.getDay() === 6 && lastWeekNumber === 52)) {
            return 53;
        }
        return 52;
    }

    // Hàm lấy tuần hiện tại của năm
    function getCurrentWeek(year) {
        const currentDate = new Date();
        return getISOWeekNumber(currentDate);
    }

    function getISOWeekNumber(date) {
        const target = new Date(date.valueOf());
        const dayNum = (date.getDay() + 6) % 7;  // Đảm bảo thứ Hai là ngày đầu tuần
        target.setDate(target.getDate() - dayNum + 3);  // Thiết lập đến thứ Tư tuần đó
        const firstThursday = target.valueOf();
        target.setMonth(0, 1);  // Ngày 1 tháng 1
        if (target.getDay() !== 4) {  // Nếu ngày đầu tiên của năm không phải là thứ Tư
            target.setMonth(0, 1 + ((4 - target.getDay()) + 7) % 7);  // Đặt ngày đầu tiên là thứ Tư
        }
        return 1 + Math.ceil((firstThursday - target) / 604800000);  // Chia số mili giây cho một tuần
    }

    function getWeekStartEndDates(year, weekNumber) {
        const january4 = new Date(year, 0, 4);
        const dayOfWeek = january4.getDay() || 7;
        const weekStart = new Date(january4);
        weekStart.setDate(january4.getDate() - dayOfWeek + 1 + (weekNumber - 1) * 7);
        const weekEnd = new Date(weekStart);
        weekEnd.setDate(weekStart.getDate() + 6);
        return {
            start: weekStart,
            end: weekEnd
        };
    }

    updateYearOptions();
    updateDateRange();
</script>

<style>
    .btn-add {
        background-color: #42C2A8;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        font-size: 16px;
    }

        .btn-add:hover {
            background-color: #37a58d;
        }



    /* Pagination */
    .pagination {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

        .pagination a {
            padding: 10px 15px;
            margin: 0 5px;
            background-color: #e0f7fa;
            text-decoration: none;
            color: black;
            border-radius: 4px;
        }

            .pagination a.active {
                background-color: #00b894;
                color: white;
            }

            .pagination a:hover {
                background-color: #019875;
                color: white;
            }

    /* CSS cho bảng lịch tuần */
    .schedule-table {
        width: 100%;
        margin-top: 20px;
        border-collapse: collapse;
        background-color: white;
    }

        .schedule-table th, .schedule-table td {
            border: 1px solid #ddd;
            padding: 15px;
            text-align: center;
        }

        .schedule-table th {
            background-color: #f1f1f1;
            color: #333;
        }

    /* Dropdown cho năm và tuần */
    .filter-container {
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        gap: 10px;
        margin-bottom: 20px;
    }

        .filter-container select {
            padding: 8px;
            border-radius: 8px;
        }

    .schedule-title {
        color: #28a745; /* Màu xanh */
        font-size: 24px;
        font-weight: bold;
        text-align: center;
        margin-bottom: 10px;
    }
</style>