@page
@model GHCW_FE.Pages.Admin.EditProductModel
@{
    ViewData["Title"] = "Cập nhật sản phẩm";
    Layout = "_LayoutManagement";
}

<header class="page-header">
    <h2><span style="color:#9197B3">Quản lý sản phẩm > </span>Cập nhật sản phẩm</h2>
</header>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success mt-3">
        @TempData["SuccessMessage"]
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger mt-3">
        @TempData["ErrorMessage"]
    </div>
}

<div class="form-container">
    <form method="post" asp-page-handler="Update" enctype="multipart/form-data">
        <input type="hidden" name="id" value="@Model.Product.Id" />
        <div class="form-group">
            <div>
                <label for="name">Tên sản phẩm:</label>
                <input type="text" id="name" name="name" value="@Model.Product.Name" required />
            </div>

            <div>
                <label for="price">Giá sản phẩm: <span>(Đơn vị tính: VNĐ)</span></label>
                <input type="number" id="price" name="price" value="@Model.Product.Price" required />
            </div>

            <div>
                <label for="size">Kích thước:</label>
                <select id="size" name="size" required>
                    <option value="">Lựa chọn kích thước</option>
                    @foreach (var size in Model.Sizes)
                    {
                        <option value="@size" selected="@(size == Model.Product.Size)"> @size </option>
                    }
                </select>
            </div>



            <div>
                <label for="quantity">Số lượng:</label>
                <input type="number" id="quantity" name="quantity" value="@Model.Product.Quantity" required />
            </div>

            <div>
                <label for="category">Danh mục:</label>
                <select id="category" name="categoryId" required>
                    <option value="">Lựa chọn danh mục</option>
                    @foreach (var category in Model.Categories)
                    {
                        <option value="@category.Id" selected="@(category.Id == Model.Product.CategoryId)"> @category.Name </option>

                    }
                </select>
            </div>

            <div class="form-group checkbox-group full-width">
                <div class="checkbox-item">
                    <input type="checkbox" id="isAvailable" name="isAvailable" @(Model.Product.IsAvailable == true ? "checked" : "") />
                    <label for="isAvailable">Đang có sẵn</label>
                </div>
                <div class="checkbox-item">
                    <input type="checkbox" id="isForRent" name="isForRent" @(Model.Product.IsForRent == true ? "checked" : "") />
                    <label for="isForRent">Để cho thuê</label>
                </div>
            </div>


            <div class="full-width">
                <label for="description">Mô tả:</label>
                <textarea id="description" name="description" rows="4" style="width: 100%; padding: 10px; border: 1px solid #ccc; border-radius: 4px;">@Model.Product.Description</textarea>
            </div>

            <div class="full-width">
                <label for="image">Ảnh sản phẩm:</label>
                <input type="file" id="image" name="image" accept="image/*" onchange="previewImage(event)" />
                <img id="imagePreview" class="image-preview" src="@Model.Product.Image" alt="Xem trước ảnh" style="display: @(!string.IsNullOrEmpty(Model.Product?.Image) ? "block" : "none");" />
            </div>
        </div>
        <div class="form-group">
            <button type="submit">Cập nhật sản phẩm</button>
        </div>
    </form>
</div>

<div class="back-button-container">
    <button class="btn-back" onclick="window.location.href='/Admin/ProductManagement'"> << Quay lại</button>
</div>

<script>
    document.getElementById("price").addEventListener("input", function () {
        const priceInput = document.getElementById("price");
        const priceValue = priceInput.value.trim();
        const priceNumber = parseInt(priceValue);

        if (!priceValue || isNaN(priceNumber) || priceNumber < 1000 || priceNumber % 1000 !== 0) {
            priceInput.setCustomValidity("Giá dịch vụ phải từ 1.000 VND trở lên và không lẻ (ví dụ: 1.000, 5.000, 100.000).");
        } else {
            priceInput.setCustomValidity("");
        }
    });

    document.getElementById("quantity").addEventListener("input", function () {
        const quantityInput = document.getElementById("quantity");
        const quantityValue = quantityInput.value.trim();
        const quantityNumber = parseInt(quantityValue);

        if (isNaN(quantityNumber) || quantityNumber < 0) {
            quantityInput.setCustomValidity("Số lượng phải lớn hơn hoặc bằng 0.");
        } else {
            quantityInput.setCustomValidity("");
        }
    });

    document.querySelector("form").addEventListener("submit", function (e) {
        const priceInput = document.getElementById("price");
        const quantityInput = document.getElementById("quantity");

        if (!priceInput.checkValidity() && !quantityInput.checkVisibility()) {
            e.preventDefault();
            priceInput.reportValidity();
            quantityInput.reportValidity();
        }
    });
</script>

<style>
    .btn-add {
        background-color: #42C2A8;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        font-size: 16px;
    }

        .btn-add:hover {
            background-color: #37a58d;
        }

    /* Form container */
    .form-container {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        margin: auto;
    }

    /* Sử dụng grid layout cho form */
    .form-group {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
        }

        .form-group input,
        .form-group select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

            /* Custom input styling */
            .form-group input[type="text"],
            .form-group input[type="email"],
            .form-group input[type="password"],
            .form-group input[type="date"],
            .form-group select {
                width: 100%;
            }

        .form-group .full-width {
            grid-column: 1 / 3;
        }

        /* Button */
        .form-group button {
            width: 80%;
            padding: 10px;
            background-color: #42C2A8;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            grid-column: 1 / 3;
            margin: 0 auto;
        }

            .form-group button:hover {
                background-color: #37a58d;
            }


    .checkbox-group {
        display: flex;
        justify-content: flex-start;
        align-items: center;
        gap: 42%;
        flex-wrap: nowrap;
    }

    .checkbox-item {
        display: flex;
        align-items: center;
        white-space: nowrap;
    }

        .checkbox-item label {
            margin-bottom: -1px;
            margin-left: 5px;
        }

    .back-button-container {
        display: flex;
        justify-content: flex-end;
        margin-top: 20px;
    }

    .btn-back {
        background-color: #42A5F5;
        color: white;
        padding: 8px 16px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 14px;
    }

        .btn-back:hover {
            background-color: #1E88E5;
        }

</style>