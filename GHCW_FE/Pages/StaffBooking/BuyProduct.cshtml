@page
@model GHCW_FE.Pages.StaffBooking.BuyProductModel
@{
    ViewData["Title"] = "Mua hàng";
    Layout = "_LayoutManagement";
    ViewData["ActivePage"] = "/StaffBooking/BuyProduct";
}
<header class="page-header">
    <h2>Mua hàng</h2>
</header>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success mt-3">
        @TempData["SuccessMessage"]
    </div>
}
@if (Model.HasBillSaved)
{
    <script>
        localStorage.removeItem("productCart");
    </script>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger mt-3">
        @Html.Raw(TempData["ErrorMessage"].ToString())
    </div>
}

<div class="booking-container">
    <div class="services-section">
        <h2 style="margin-bottom: 1rem">Danh sách sản phẩm</h2>
        <div class="services-grid">
            @foreach (var service in Model.AvailableProducts)
            {
                <div class="service-card">
                    <div class="service-image-container">
                        <img src="@service.Image" alt="@service.Name" class="service-image">
                    </div>
                    <div class="service-info">
                        <h3>@service.Name</h3>
                        <p><strong>Kích thước:</strong> @service.Size</p>
                        <p><strong>Loại:</strong> @(service.IsForRent ? "Thuê" : "Mua")</p>
                        <p class="availability">
                            <strong>Trạng thái:</strong>
                            <span class="@(service.IsAvailable ? "available" : "unavailable")">
                                @(service.IsAvailable ? "Còn hàng" : "Hết hàng")
                            </span>
                        </p>
                        <div class="service-actions">
                            <p class="price">Giá: @(service.Price) VND</p>
                            @if (service.IsAvailable)
                            {
                                <div class="quantity-row">
                                    <label class="quantity-label">Số lượng:</label>
                                    <input type="number" min="1" value="1" id="quantity-@service.Id" class="quantity-input" required oninput="validateQuantity(this)">
                                </div>
                                <button class="btn btn-primary" onclick="addToCart(@service.Id, '@Html.Raw(service.Name.Replace("'", "\\'"))', parseInt(document.getElementById('quantity-@service.Id').value), @service.Price)">Thêm</button>
                            }
                            </div>

                    </div>
                </div>
            }
        </div>
    </div>

    <div class="cart-summary">
        <h2>Sản phẩm đã chọn</h2>
        <div class="cart-items" id="cartItems">
            <p>Bạn chưa chọn sản phẩm nào.</p>
        </div>
        <form method="post" id="paymentForm">
            <input type="hidden" id="cartData" name="cartData" />
            <div class="discount-section" style="margin: 1rem 0;">
                <label for="discountSelect">Chọn mã giảm giá:</label>
                <select id="discountSelect" asp-for="SelectedDiscountCode" onchange="applyDiscount()">
                    <option value="">Không áp dụng mã giảm giá</option>
                    @if (Model.AvailableDiscounts.Any())
                    {
                        @foreach (var discount in Model.AvailableDiscounts)
                        {
                            <option value="@discount.Code" data-value="@discount.Value">@discount.Code - Giảm @discount.Value %</option>
                        }
                    }
                </select>
            </div>

            <div class="cart-total">
                <h3>Tổng tiền: <span id="cartTotal">0</span> VND</h3>
            </div>

            <div class="customer-search-section">
                <label for="customerSearch">Tìm khách hàng (Email):</label>
                <input type="text" id="customerSearch" placeholder="Nhập email khách hàng..." oninput="searchCustomer()" asp-for="SelectedCustomerEmail" />
                <ul id="customerResults" class="customer-results"></ul>
                <!-- Add Customer Button -->
                <button id="showAddCustomerFormBtn" class="btn btn-primary" style="display: none; margin: 1rem;" onclick="showAddCustomerForm()">Thêm khách hàng mới</button>
            </div>

            <div id="addCustomerForm" style="display: none;">
                <div style="margin: 1rem 0;">
                    <label class="label-text" for="name">Họ và tên:</label>
                    <input type="text" id="name" name="name" class="input-text" title="Vui lòng nhập họ tên không chứa số và kí tự đặc biệt" placeholder="Nhập họ tên" required />
                </div>

                <div style="margin: 1rem 0;">
                    <label class="label-text" for="email">Email:</label>
                    <input type="email" id="email" name="email" title="Vui lòng nhập đúng định dạng email" class="input-text" placeholder="Nhập email" required />
                </div>

                <div style="margin: 1rem 0;">
                    <label class="label-text" for="phonenumber">Số điện thoại:</label>
                    <input type="text" id="phonenumber" name="phonenumber" placeholder="Nhập số điện thoại" class="input-text"
                           pattern="[0-9]{10}" maxlength="10" title="Số điện thoại phải gồm 10 chữ số" required />
                </div>

                <div class="form-group checkbox-group" style="margin: 1rem 0;">
                    <label>Giới tính:</label>
                    <div>
                        <label>
                            Nam
                            <input type="radio" id="genderMale" name="gender" value="true" checked>
                        </label>
                    </div>
                    <div>
                        <label>
                            Nữ
                            <input type="radio" id="genderFemale" name="gender" value="false">
                        </label>
                    </div>
                </div>

                <div class="form-group checkbox-group" style="margin: 1rem 0;">
                    <label>
                        <input type="checkbox" id="isEmailNotify" name="isEmailNotify" value="true" checked>
                        Nhận thông báo qua Email
                    </label>
                </div>
            </div>

            <div class="add-customer-option">
                <label for="addNewCustomer">Bạn có muốn thêm khách hàng mới?</label>
                <input type="checkbox" id="addNewCustomer" name="addNewCustomer" asp-for="AddNewCustomer">
            </div>
        </form>

        <button class="btn btn-success" id="paymentButton" disabled" style="margin: 1rem;">Thanh toán</button>

    </div>

    <div class="confirmation-dialog" id="confirmationDialog" style="display: none;">
        <p>Bạn có chắc chắn muốn thanh toán không?</p>
        <button class="btn btn-success" onclick="confirmPayment()">Có</button>
        <button class="btn btn-danger" onclick="cancelPayment()">Không</button>
    </div>

</div>

<script>
    let cart = JSON.parse(localStorage.getItem("productCart")) || [];

    const availableDiscounts = @Html.Raw(Json.Serialize(Model.AvailableDiscounts));

    function validateQuantity(input) {
        const originalValue = input.value;
        const cursorPosition = input.selectionStart;

        const filteredValue = originalValue.replace(/[^0-9]/g, "");

        if (!filteredValue || parseInt(filteredValue, 10) === 0) {
            input.value = "1";
        } else {
            input.value = filteredValue;
        }

        // Đặt lại vị trí con trỏ
        const newCursorPosition = Math.min(cursorPosition, input.value.length);
        input.setSelectionRange(newCursorPosition, newCursorPosition);
    }

    document.querySelectorAll('.quantity-input').forEach(input => {
        input.addEventListener('keydown', function (event) {
            // Các phím được phép nhập: Backspace, Delete, Tab, mũi tên, Ctrl/Command + A, C, V
            const allowedKeys = [
                "Backspace", "Delete", "Tab", "ArrowLeft", "ArrowRight", "Control", "Meta", "Enter"
            ];

            if (
                allowedKeys.includes(event.key) || // Cho phép phím đặc biệt
                (event.ctrlKey || event.metaKey) // Cho phép Ctrl/Command
            ) {
                return;
            }

            // Chặn nhập "e", ".", "-", hoặc ký tự không phải số
            if (!/^[0-9]$/.test(event.key)) {
                event.preventDefault();
            }
        });

        input.addEventListener('input', function () {
            validateQuantity(input);
        });
    });

    function updateCartDisplay() {
        const cartItemsContainer = document.getElementById("cartItems");
        cartItemsContainer.innerHTML = "";

        // Add column headers
        const headerRow = document.createElement("div");
        headerRow.className = "cart-header";
        headerRow.innerHTML = `
            <span class="cart-header-item">Tên sản phẩm</span>
            <span class="cart-header-item">Số lượng</span>
            <span class="cart-header-item">Thành tiền</span>
            <span class="cart-header-item">Hành động</span>
        `;
        cartItemsContainer.appendChild(headerRow);

        let total = 0;
        cart.forEach(item => {
            const displayPrice = item.price;
            const itemRow = document.createElement("div");
            itemRow.className = "cart-item";
            itemRow.innerHTML = `
                <span title="${item.name}" class="cart-item-name">${item.name}</span>
                <span class="cart-item-quantity">${item.quantity}</span>
                <span class="cart-item-price">${(displayPrice * item.quantity).toLocaleString()} VND</span>
                <button onclick="removeFromCart(${item.serviceId})" class="remove-btn">Xóa</button>
            `;
            cartItemsContainer.appendChild(itemRow);
            total += displayPrice * item.quantity;
        });

        if (cart.length === 0) {
            cartItemsContainer.innerHTML = "<p>Bạn chưa chọn sản phẩm nào.</p>";
        }

        document.getElementById("cartTotal").textContent = total.toLocaleString();
        document.getElementById("paymentButton").disabled = cart.length === 0;
    }


    function addToCart(serviceId, name, quantity, price) {
        const quantityInput = document.getElementById('quantity-' + serviceId);
        if (isNaN(quantity) || quantity < 1) {
            alert("Số lượng phải lớn hơn 0.");
            return;
        }

        const existingItem = cart.find(item => item.serviceId === serviceId);

        if (existingItem) {
            existingItem.quantity += quantity;
        } else {
            cart.push({ serviceId, name, quantity, price });
        }

        localStorage.setItem("productCart", JSON.stringify(cart));
        updateCartDisplay();
    }

    function removeFromCart(serviceId) {
        cart = cart.filter(item => item.serviceId !== serviceId);
        localStorage.setItem("productCart", JSON.stringify(cart));
        updateCartDisplay();
    }

    document.getElementById("paymentButton").addEventListener("click", function() {
        const confirmationDialog = document.getElementById("confirmationDialog");
        confirmationDialog.style.display = "block";  // Show confirmation dialog
    });

    function confirmPayment() {
        let cartt = JSON.parse(localStorage.getItem("productCart")) || [];
        let cartData = cartt.map(item => ({
            ServiceId: item.serviceId,
            Quantity: item.quantity,
            Price: item.price
        }));

        document.getElementById('cartData').value = JSON.stringify(cartData);

        // Submit the form using JavaScript
        document.getElementById("paymentForm").submit();

        // Hide the confirmation dialog
        const confirmationDialog = document.getElementById("confirmationDialog");
        confirmationDialog.style.display = "none";
    }


    function cancelPayment() {
        const confirmationDialog = document.getElementById("confirmationDialog");
        confirmationDialog.style.display = "none";
    }

    document.addEventListener("DOMContentLoaded", updateCartDisplay);

    async function searchCustomer() {
        const searchInput = document.getElementById("customerSearch").value.trim();
        const resultsContainer = document.getElementById("customerResults");
        const addCustomerButton = document.getElementById("showAddCustomerFormBtn");

        // Clear results if input is empty
        if (!searchInput) {
            resultsContainer.innerHTML = "";
            addCustomerButton.style.display = "none";
            return;
        }

        try {
            const response = await fetch(`https://ghcw.azurewebsites.net/api/Customer/CustomerList?$filter=contains(email,'${encodeURIComponent(searchInput)}')`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer @Model.Token`
                }
            });
            if (!response.ok) throw new Error("Failed to fetch customers");

            const customers = await response.json();
            resultsContainer.innerHTML = "";

            if (customers.length > 0) {
                customers.forEach(customer => {
                    const listItem = document.createElement("li");
                    listItem.textContent = `${customer.name} - ${customer.email}`;
                    listItem.classList.add("customer-result-item");
                    listItem.onclick = () => selectCustomer(customer);
                    resultsContainer.appendChild(listItem);
                });

                addCustomerButton.style.display = "none";
            } else {
                resultsContainer.innerHTML = "<li>Không tìm thấy khách hàng nào.</li>";
                addCustomerButton.style.display = "block"; // Show "Add Customer" button
            }
        } catch (error) {
            console.error("Error searching customers:", error);
            resultsContainer.innerHTML = "<li>Có lỗi xảy ra. Vui lòng thử lại.</li>";
            addCustomerButton.style.display = "none";
        }
    }

    function selectCustomer(customer) {
        const resultsContainer = document.getElementById("customerResults");
        resultsContainer.innerHTML = `<li>Đã chọn: ${customer.name} - ${customer.email}</li>`;

        // Hide Add Customer Form if it was displayed
        document.getElementById("addCustomerForm").style.display = "none";
        document.getElementById("showAddCustomerFormBtn").style.display = "none";

        // Use the selected customer ID in your logic (e.g., set a hidden field)
        document.getElementById("customerSearch").value = customer.email;
    }

    function showAddCustomerForm() {
        document.getElementById("addCustomerForm").style.display = "block";
        document.getElementById("customerSearch").value = "";
    }

    document.addEventListener("click", (event) => {
        const searchContainer = document.querySelector(".customer-search-section");
        const resultsContainer = document.getElementById("customerResults");

        if (!searchContainer.contains(event.target)) {
            resultsContainer.innerHTML = ""; // Close dropdown when clicking outside
        }
    });

    function applyDiscount() {
        const discountSelect = document.getElementById("discountSelect");
        const discountValue = parseInt(discountSelect.options[discountSelect.selectedIndex].getAttribute("data-value")) || 0;

        // Tính tổng tiền từ cart
        const originalCartTotal = cart.reduce((total, item) => {
            return total + (item.price * item.quantity);
        }, 0);

        // Áp dụng giảm giá
        const discountedTotal = originalCartTotal * (1 - discountValue / 100);

        // Cập nhật giao diện tổng tiền
        const cartTotalElement = document.getElementById("cartTotal");
        cartTotalElement.textContent = discountedTotal.toLocaleString();
    }

</script>

<style>
    /* General Layout */
    .booking-container {
        display: flex;
        gap: 20px;
        align-items: flex-start;
        padding: 20px;
        font-family: Arial, sans-serif;
        color: #333;
    }

    /* Services Section */
    .services-section {
        flex: 2;
        background-color: #f3f8ff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
    }

    .services-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr); /* 2 columns */
        gap: 20px;
    }

    .service-card {
        background: #ffffff;
        border-radius: 15px;
        box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        overflow: hidden;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

        .service-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
        }

    .service-image-container {
        width: 100%;
        height: 200px;
        background: #f9f9f9;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
    }

    .service-image {
        max-width: 90%;
        max-height: 90%;
        object-fit: cover;
        border-radius: 10px;
        transition: transform 0.3s ease;
    }

    .service-card:hover .service-image {
        transform: scale(1.05);
    }

    .service-info {
        padding: 20px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

        .service-info h3 {
            font-size: 1.25rem;
            font-weight: bold;
            margin-bottom: 10px;
            color: #333;
        }

        .service-info p {
            margin: 5px 0;
            font-size: 0.95rem;
            color: #555;
        }

        .service-info .availability {
            font-weight: bold;
            font-size: 0.9rem;
        }

            .service-info .availability .available {
                color: #28a745;
            }

            .service-info .availability .unavailable {
                color: #dc3545;
            }

    .service-actions {
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin-top: 15px;
    }

        .service-actions .price {
            font-size: 1.1rem;
            font-weight: bold;
            color: #333;
        }

    ..quantity-row {
        display: flex;
        align-items: center;
        gap: 10px; /* Adjust the spacing between the label and input */
        margin-top: 10px; /* Add some space between this row and the content above */
    }

    .quantity-label {
        font-weight: bold;
        font-size: 14px;
    }

    .quantity-input {
        width: 60px; /* Adjust width to fit nicely */
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }


    .btn-primary {
        background: linear-gradient(135deg, #007bff, #0056b3);
        color: #fff;
        padding: 10px 15px;
        border: none;
        border-radius: 25px;
        cursor: pointer;
        font-size: 1rem;
        transition: background 0.3s ease;
    }

        .btn-primary:hover {
            background: linear-gradient(135deg, #0056b3, #003f8a);
        }


    /* Cart Section */
    .cart-summary {
        flex: 1;
        background-color: #fff4e6;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        height: 100%; /* Matches the height of the services section */
    }

        .cart-summary h2 {
            margin-bottom: 20px;
        }

    .cart-header, .cart-item {
        display: grid;
        grid-template-columns: 2fr 1fr 1fr 1fr; /* Chia tỷ lệ cột */
        align-items: center;
        gap: 10px;
        padding: 10px 0;
        border-bottom: 1px solid #ddd;
    }

    .cart-header {
        font-weight: bold;
        background-color: #f3f8ff;
    }

    .cart-header-item, .cart-item div {
        text-align: center;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .cart-item-name {
        text-align: left;
    }

    .cart-total {
        font-size: 1.2rem;
        font-weight: bold;
        margin-top: 20px;
    }

    .btn-primary {
        background-color: #0066cc;
        border-radius: 5px;
        padding: 5px 10px;
    }

    .remove-btn {
        background-color: #ff4d4d;
        padding: 5px 10px;
        color: #fff;
        border: none;
        cursor: pointer;
    }


    .btn-success {
        background: #28a745;
        color: #fff;
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

        .btn-success:disabled {
            background: #ccc;
            cursor: not-allowed;
        }

    .remove-btn {
        background: #ff4d4d;
        color: #fff;
        padding: 5px 10px;
        font-size: 0.9rem;
        border: none;
        border-radius: 3px;
        cursor: pointer;
    }

    .confirmation-dialog {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        display: none;
        z-index: 1000;
    }

        .confirmation-dialog button {
            padding: 10px 15px;
            margin: 5px;
            cursor: pointer;
        }

        .confirmation-dialog .btn-success {
            background-color: #28a745;
            color: #fff;
            border: none;
        }

        .confirmation-dialog .btn-danger {
            background-color: #dc3545;
            color: #fff;
            border: none;
        }

    .customer-results {
        position: absolute;
        top: calc(100% + 5px); /* Position below the search bar with a gap */
        left: 0;
        width: 100%;
        max-height: 200px; /* Limit height with a scrollbar if content overflows */
        overflow-y: auto;
        list-style-type: none;
        background-color: #ffffff;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 5px;
        z-index: 1000;
        margin: 0;
        padding: 0;
    }

    .customer-result-item {
        padding: 10px 15px;
        cursor: pointer;
        border-bottom: 1px solid #f0f0f0;
        font-size: 14px;
    }

        .customer-result-item:last-child {
            border-bottom: none;
        }

        .customer-result-item:hover {
            background-color: #f3f8ff;
            color: #0066cc;
        }


    .customer-search-section {
        position: relative;
        margin: 1rem 0;
    }

    #customerSearch {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    #addCustomerForm {
        background-color: #ffffff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin-top: 20px;
    }

        #addCustomerForm div {
            margin-bottom: 15px;
        }

        #addCustomerForm label {
            font-weight: bold;
            margin-bottom: 5px;
            font-size: 14px;
        }

        #addCustomerForm .label-text {
            display: block;
        }

        #addCustomerForm .input-text {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
        }

    .checkbox-group label {
        display: flex;
        align-items: center;
        font-size: 14px;
    }

    .checkbox-group input {
        margin-right: 10px;
    }

    #addCustomerForm button {
        background: #0066cc;
        color: #fff;
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        font-weight: bold;
    }

        #addCustomerForm button:hover {
            background: #004da3;
        }

</style>
